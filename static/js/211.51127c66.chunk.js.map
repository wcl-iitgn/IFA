{"version":3,"file":"static/js/211.51127c66.chunk.js","mappings":"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","sources":["components/BaseMap.js","components/SearchBar.js","pages/FiltererdJsonData.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import indiastates  from '../assets/data/indiaStates.json';\nimport indiaRivers from '../assets/data/indiaRivers.json';\n\n\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\n\n\n\nconst layers = [\n  {\n    name: \"Street Map\",\n    url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n    subdomains: ['a', 'b', 'c'],\n    attribution:'Tiles &copy; Esri'\n  },\n  {\n    name: \"Google Map\",\n    url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']\n  },\n  // {\n  //   name: \"Open Street Map\",\n  //   url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n  //   subdomains: ['a', 'b', 'c']\n  // },\n  {\n    name: \"Topographic Map\",\n    url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    subdomains: ['a', 'b', 'c']\n  },\n  {\n    name: \"Satellite Map\",\n    url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']\n  }\n\n]\n\n\n\nconst BaseMap = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n\n\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n\n\n  const handleZoomToCenter = () => {\n    map.setView([23, 84], 5);\n\n  };\n\n\n\n\n  return (\n    <>\n      <LayersControl position=\"topright\" collapsed={true}>\n\n\n        {layers.map((layer, index) => {\n          return (\n            <LayersControl.BaseLayer\n              key={index}\n              checked={index === 0 ? true : false}\n              name={layer.name}\n            >\n\n              <TileLayer\n                attribution={layer.attribution}\n                url={layer.url}\n                subdomains={layer.subdomains}\n              />\n            </LayersControl.BaseLayer>\n          )\n        })}\n\n\n\n\n\n\n\n\n\n        {/* <LayersControl.Overlay checked name=\"States Boundary\">\n          <FeatureGroup>\n            \n            <GeoJSON data={indiastates.features} style={{\n              fillColor: 'none',\n              weight: 2,\n              color: 'black',\n              interactive: false\n            }} />\n          </FeatureGroup>\n        </LayersControl.Overlay> */}\n\n\n        <LayersControl.Overlay name=\"Rivers\">\n          <FeatureGroup>\n            <GeoJSON data={indiaRivers.features} style={{\n              fillColor: 'none',\n              weight: 2,\n              color: 'blue',\n              interactive: false\n            }} />\n          </FeatureGroup>\n        </LayersControl.Overlay>\n\n\n      </LayersControl>\n\n      <HandleMouseHover />\n\n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div>\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n\n\n\n\n    </>\n  )\n}\n\nexport default BaseMap","import React, { useEffect } from 'react'\nimport { useMap } from 'react-leaflet';\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\nimport 'leaflet-geosearch/dist/geosearch.css';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport L from 'leaflet';\n\n// Merge custom icon options with default options\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow,\n});\n\nconst SearchBar = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    const provider = new OpenStreetMapProvider();\n    const searchControl = new GeoSearchControl({\n      provider,\n      style: 'bar',\n    });\n\n    map.addControl(searchControl);\n\n    return () => {\n      map.removeControl(searchControl);\n    };\n  }, [map]);\n\n  return (\n    null\n  )\n}\n\nexport default SearchBar","import React, { useEffect } from 'react';\nimport { GeoJSON, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport { mapCenter, setInitialMapZoom } from '../helpers/functions';\n\nconst FiltererdJsonData = ({\n    selectedState,\n    selectedDistrict,\n    filteredIndiaDistrict,\n}) => {\n    const map = useMap();\n\n\n\n\n    useEffect(() => {\n        if (filteredIndiaDistrict && filteredIndiaDistrict.features.length > 0) {\n            const bounds = filteredIndiaDistrict.features.reduce((acc, feature) => {\n                const featureBounds = L.geoJSON(feature.geometry).getBounds();\n                return acc.extend(featureBounds);\n            }, new L.LatLngBounds());\n\n            map.flyToBounds(bounds);\n        } else {\n            map.flyTo(mapCenter, setInitialMapZoom());\n        }\n    }, [filteredIndiaDistrict, map]);\n\n\n    return (\n        <>\n            {filteredIndiaDistrict && filteredIndiaDistrict.features && (\n\n            <GeoJSON\n                key={`${selectedState}-${selectedDistrict}`}\n                data={filteredIndiaDistrict.features}\n                style={{ fillColor: 'none', weight: 4, color: 'yellow' }}\n            />\n            \n            )}\n        </>\n\n    );\n};\n\nexport default FiltererdJsonData;\n"],"names":["layers","name","url","subdomains","attribution","BaseMap","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","LayersControl","position","collapsed","layer","index","_jsx","BaseLayer","checked","TileLayer","Overlay","FeatureGroup","GeoJSON","data","indiaRivers","style","fillColor","weight","color","interactive","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","L","Default","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","SearchBar","useEffect","provider","OpenStreetMapProvider","searchControl","GeoSearchControl","addControl","removeControl","_ref","selectedState","selectedDistrict","filteredIndiaDistrict","features","length","bounds","reduce","acc","feature","featureBounds","geometry","getBounds","extend","flyToBounds","flyTo","mapCenter","setInitialMapZoom","concat"],"sourceRoot":""}