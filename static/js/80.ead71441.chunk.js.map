{"version":3,"file":"static/js/80.ead71441.chunk.js","mappings":"y1kCACA,MAiDA,EAjDuBA,KAEfC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAEQC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQF,SAAA,EACnBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,UACzBF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,wCAUPC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcF,SAAA,EACzBF,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,iBAGhCH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EACxBF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,UAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,WAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,UAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,SAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,SAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,gBC0SxD,EA9TqBK,KACjB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAE1CC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAS,KAC5CK,EAAuBC,IAA4BN,EAAAA,EAAAA,UAAS,OAC5DO,EAAkBC,IAAuBR,EAAAA,EAAAA,UAAS,IAUzD,IAAIS,EACAC,EAEiB,kBAAjBZ,GACAW,EAAeE,EACfD,EAAsBE,GACE,eAAjBd,GACPW,EAAeI,EACfH,EAAsBI,IAEtBL,EAAe,KACfA,EAAe,MAmGnB,MAAMM,EAAmBC,GACdA,EAAU,GAAK,UAChBA,EAAU,GAAK,UACXA,EAAU,GAAK,UACXA,EAAU,EAAI,UACVA,EAAU,EAAI,UACVA,EAAU,EAAI,UACVA,EAAU,GAAM,UACZA,EAAU,IAAO,UACbA,EAAU,GAAM,UACZ,UA+B1C,OACI1B,EAAAA,EAAAA,KAAA,OAAKI,UAAU,0BAAyBF,UAEpCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBF,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYF,SAAA,EACvBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mCAAkCF,UAC7CF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAY,CACTC,MAAOpB,EACPqB,SArKIC,CAACC,EAAOH,KAChCnB,EAAgBmB,GAChBZ,EAAyB,MACzBA,EAAyB,KAAK,EAmKVgB,GAAG,UACHC,QAAS,CACL,aACA,iBAEJC,YAAcC,IACVnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,IAAKD,EAAQ/B,UAAU,mBAAmBiC,MAAM,wBAOtElC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCF,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,SAAOI,UAAU,aAAYF,SAAC,kBAE9BF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAY,CACTtB,MAAO,CAAEiC,aAAc,QACvBT,SAAUA,CAACE,EAAOH,IAjKhBW,EAACR,EAAOH,KAC9B,IAAIY,EAAQlB,EAAemB,SAASC,QAAQC,GAASA,EAAKC,WAAWC,QAAUjB,IAC/EY,EAAQ,IAAI,IAAIM,IAAIN,EAAMO,KAAKJ,GAASA,MACxCH,EAAMQ,OAENpC,EAAgB4B,GAChB1B,EAAiBc,GAEjB,IAAIqB,EAAwB7B,EAAoBqB,SAASC,QAAQQ,GAAYA,EAAQN,WAAWC,QAAUjB,IAG1GZ,EAAyB,CACrBmC,KAAM,oBACNV,SAAUQ,GACZ,EAmJ8CV,CAAkBR,EAAOH,GACrDI,GAAG,QACHoB,eAAiBC,GAAK,GAAAC,OAAQD,GAC9BpB,QAAS,IAAI,IAAIa,IAAItB,EAAYiB,SAASM,KAAKJ,GAASA,EAAKC,WAAWC,UACxEU,qBAAsBA,CAACC,EAAQ5B,IAAU4B,EAAOC,OAAS7B,EAAM6B,KAC/DC,cAAe,oBACfC,UAAWnD,EACXoD,aAAcA,CAACC,EAAOR,KAClBS,EAAAA,EAAAA,eAACC,EAAAA,EAAG,CAACC,UAAU,QAASH,EAAOI,IAAKZ,EAChCa,GAAI,CACAC,SAAU,SAEbd,GAGTnB,YAAcC,IAAWnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,IAAKD,EAAQE,MAAM,mBAGxC,kBAAjB7B,IACGR,EAAAA,EAAAA,KAAC2B,EAAAA,EAAY,CACTtB,MAAO,CAAEiC,aAAc,QACvBT,SAAUA,CAACE,EAAOH,IA/JjBwC,EAACrC,EAAOH,KACjCV,EAAoBU,GAEpB,IAAIyC,EAA2B/C,EAAemB,SAASC,QAAQQ,GAAYA,EAAQN,WAAW0B,WAAa1C,GAASsB,EAAQN,WAAWC,QAAUhC,IAEjJG,EAAyB,CACrBmC,KAAM,oBACNV,SAAU4B,GACZ,EAuJkDD,CAAqBrC,EAAOH,GACxDI,GAAG,WACHoB,eAAiBmB,GAAQ,GAAAjB,OAAQiB,GACjCtC,QAAS,IAAI,IAAIa,IAAInC,EAAaoC,KAAKJ,GAASA,EAAKC,WAAW0B,aAChEf,qBAAsBA,CAACC,EAAQ5B,IAAU4B,EAAOC,OAAS7B,EAAM6B,KAC/DC,cAAe,oBACfC,SAAkC,IAAxBhD,EAAa6D,OACvBZ,aAAcA,CAACC,EAAOU,KAClBT,EAAAA,EAAAA,eAACC,EAAAA,EAAG,CAACC,UAAU,QAASH,EAAOI,IAAKM,EAChCL,GAAI,CACAC,SAAU,SAEbI,GAGTrC,YAAcC,IAAWnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,IAAKD,EAEpCE,MAAM,6BAc1BlC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EACxBC,EAAAA,EAAAA,MAACsE,EAAAA,EAAY,CACTC,mBAAmB,EAEnBC,OAAQC,EAAAA,GACRvE,MAAO,CAAEwE,MAAO,OAAQC,OAAQ,OAAQxE,gBAAiB,QAASyE,OAAQ,OAAQC,OAAQ,QAC1FC,MAAMC,EAAAA,EAAAA,MACNC,UAAWA,EAAAA,GAEXC,SAASF,EAAAA,EAAAA,MACTG,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MAGVC,iBAAiB,EAAMtF,SAAA,EAEvBF,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,IAGT1E,IACGf,EAAAA,EAAAA,KAAC0F,EAAAA,EAAiB,CACd7E,cAAeA,EACfI,iBAAkBA,EAElBF,sBAAuBA,KAO/Bf,EAAAA,EAAAA,KAAC2F,EAAAA,EAAO,CAEJtF,MA1ID6C,IAEnB,MAMMxB,EAN4BM,KAC9B,MAAM4D,EAAWzE,EAAa0E,MAAKlD,GAAQA,EAAKmD,KAAO9D,IACvD,OAAO4D,EAAWA,EAASG,YAAc,IAAI,EAIjCC,CAAyB9C,EAAQN,WAAWkD,IAC5D,MAAQ,CACJG,UAAWxE,EAAgBC,GAC3BwE,OAAQ,EACRC,QAAS,EACTC,MAAO,QACPC,UAAW,IACXC,YAAa,EAChB,EA2HmBC,KAAMnF,EACNoF,cAlNxB,SAA+BtD,EAASuD,GAChCtF,IAWAsF,EAAMC,GAAG,aAAa,SAAUC,GAE5B,MAAMf,EAAWzE,EAAa0E,MAAKlD,GAAQA,EAAKmD,KAAO5C,EAAQN,WAAWkD,KAC1E,GAAI5C,EAAQN,YAAcM,EAAQN,WAAWkD,GAAI,CAC7C,IAAIc,EACiB,kBAAjBpG,EACAoG,EAAY,8CAAAtD,OAEdJ,EAAQN,WAAWkD,GAAE,qCAAAxC,OACfJ,EAAQN,WAAW0B,SAAQ,kCAAAhB,OAC9BJ,EAAQN,WAAWC,MAAK,0DAAAS,OACAsC,EAAWA,EAASiB,QAAU,KAAI,oEAAAvD,OAC/BsC,EAAWA,EAASG,YAAc,KAAI,6CAG1C,eAAjBvF,IACPoG,EAAY,8CAAAtD,OAEdJ,EAAQN,WAAWkD,GAAE,kCAAAxC,OAClBJ,EAAQN,WAAWC,MAAK,0DAAAS,OACAsC,EAAWA,EAASiB,QAAU,KAAI,oEAAAvD,OAC/BsC,EAAWA,EAASG,YAAc,KAAI,8CAMtEU,EAAMK,YAAYF,EAAc,CAAEG,QAAQ,GAC9C,CACAN,EAAMO,aAEV,IAIAP,EAAMC,GAAG,YAAY,WACjBD,EAAMQ,cACV,IAER,GA4J6BzG,GAWRA,IACGR,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBF,UACjCF,EAAAA,EAAAA,KAACD,EAAc,OASvBC,EAAAA,EAAAA,KAACkH,EAAAA,EAAO,OAIX1G,IACGR,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAAqBF,UAChCF,EAAAA,EAAAA,KAACD,EAAc,aAO7B,C","sources":["components/MaxFloodLegend.js","pages/MaxFloodPage.js"],"sourcesContent":["import React from 'react'\nconst MaxFloodLegend = () => {\n    return (\n        <>\n\n                <div className=\"legend\">\n                    <div className=\"item-heading\">\n                        <p>Historical Max. Flooded Area (%)</p>\n                    </div>\n                    {/* <div className=\"legend-item\">\n                        <p className=\"legend-color-value\"> Exceptional</p>\n                        <p className=\"legend-color-value\"> Extreme</p>\n                        <p className=\"legend-color-value\"> Severe</p>\n                        <p className=\"legend-color-value\"> Moderate</p>\n                        <p className=\"legend-color-value\"> Abnormal</p>\n                        <p className=\"legend-color-value\"> Normal</p>\n                    </div> */}\n                    <div className=\"legend-color\">\n                        <i style={{backgroundColor: '#F7FBFF'}}></i>\n                        <i style={{backgroundColor: '#E4EFF9'}}></i>\n                        <i style={{backgroundColor: '#D1E2F3'}}></i>\n                        <i style={{backgroundColor: '#BAD6EB'}}></i>\n                        <i style={{backgroundColor: '#73B2D8'}}></i>\n                        <i style={{backgroundColor: '#539DCC'}}></i>\n                        <i style={{backgroundColor: '#3585BF'}}></i>\n                        <i style={{backgroundColor: '#1E6CB1'}}></i>\n                        <i style={{backgroundColor: '#08519C'}}></i>\n                        <i style={{backgroundColor: '#09306B'}}></i>\n                    </div>\n\n                    <div className=\"legend-item\">\n                        <p className=\"legend-num-value\"> 0</p>\n                        <p className=\"legend-num-value\"> 0.1</p>\n                        <p className=\"legend-num-value\"> 0.25</p>\n                        <p className=\"legend-num-value\"> 0.5</p>\n                        <p className=\"legend-num-value\"> 1</p>\n                        <p className=\"legend-num-value\"> 2</p>\n                        <p className=\"legend-num-value\"> 5</p>\n                        <p className=\"legend-num-value\"> 10</p>\n                        <p className=\"legend-num-value\"> 15</p>\n                        <p className=\"legend-num-value\"> 30</p>\n                    </div>\n\n                </div>\n\n        </>\n\n    )\n}\n\nexport default MaxFloodLegend","import React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport BaseMap from '../components/BaseMap';\nimport SearchBar from '../components/SearchBar';\nimport IndiaDistricts from '../assets/data/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/IndiaStates.json';\nimport { mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/functions';\nimport Districts_max_flood_area_frac from \"../assets/data/Districts_max_flood_area_frac.json\"\nimport States_max_flood_area_frac from \"../assets/data/States_max_flood_area_frac.json\"\nimport FiltererdJsonData from './FiltererdJsonData';\nimport MaxFloodLegend from '../components/MaxFloodLegend';\n\n\nconst MaxFloodPage = () => {\n    const [selectedView, setSelectedView] = useState(\"\")\n\n    const [districtList, setDistrictList] = useState([]);\n    const [selectedState, setSelectedState] = useState([]);\n    const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n    const [selectedDistrict, setSelectedDistrict] = useState([]);\n\n\n\n    const handleViewSelection = (event, value) => {\n        setSelectedView(value);\n        setFilteredIndiaDistrict(null)\n        setFilteredIndiaDistrict(null)\n    };\n\n    let selectedData;\n    let selectedGeoJSonData;\n\n    if (selectedView === 'District Wise') {\n        selectedData = Districts_max_flood_area_frac;\n        selectedGeoJSonData = IndiaDistricts\n    } else if (selectedView === 'State Wise') {\n        selectedData = States_max_flood_area_frac;\n        selectedGeoJSonData = IndiaStates\n    } else {\n        selectedData = null\n        selectedData = null\n    }\n    // console.log(selectedGeoJSonData)\n\n\n\n    const handleStateSelect = (event, value) => {\n        let items = IndiaDistricts.features.filter((item) => item.properties.STATE === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setDistrictList(items);\n        setSelectedState(value)\n\n        let filteredStateFeatures = selectedGeoJSonData.features.filter((feature) => feature.properties.STATE === value);\n\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredStateFeatures,\n        });\n\n        // mapRef.current.flyToBounds(bounds, { padding: [10, 10] });\n\n\n\n    };\n\n\n    const handleDistrictSelect = (event, value) => {\n        setSelectedDistrict(value)\n\n        let filteredDistrictFeatures = IndiaDistricts.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredDistrictFeatures,\n        });\n\n    };\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        if (selectedData) {\n\n            // layer.on('click', function (e) {\n            //     // setSelectedFeatureName(feature.properties.NAME);\n            //     setFilteredIndiaDistrict({\n            //         type: \"FeatureCollection\",\n            //         features: feature,\n            //     });\n\n            // });\n\n            layer.on('mouseover', function (e) {\n\n                const DataItem = selectedData.find(item => item.ID === feature.properties.ID);\n                if (feature.properties && feature.properties.ID) {\n                    let popupContent;\n                    if (selectedView === 'District Wise') {\n                        popupContent = `\n              <div>\n                ID: ${feature.properties.ID}<br/>\n                DISTRICT: ${feature.properties.DISTRICT}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                Historical Max. Flooded Area:  ${DataItem ? DataItem.MaxArea : null} km²<br/>\n                Historical Max. Flooded Area (%): ${DataItem ? DataItem.MaxFraction : null}<br/>\n              </div>\n            `;\n                    } else if (selectedView === 'State Wise') {\n                        popupContent = `\n              <div>\n                ID: ${feature.properties.ID}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                Historical Max. Flooded Area:  ${DataItem ? DataItem.MaxArea : null} km²<br/>\n                Historical Max. Flooded Area (%): ${DataItem ? DataItem.MaxFraction : null}<br/>\n              </div>\n            `;\n                    }\n\n\n                    layer.bindTooltip(popupContent, { sticky: true });\n                }\n                layer.openTooltip();\n\n            }\n\n            );\n\n            layer.on('mouseout', function () {\n                layer.closeTooltip();\n            });\n        }\n    }\n\n\n\n    const DistrictDensity = (density => {\n        return density > 30 ? '#09306B'\n            : density > 15 ? '#08519C'\n                : density > 10 ? '#1E6CB1'\n                    : density > 5 ? '#3585BF'\n                        : density > 2 ? '#539DCC'\n                            : density > 1 ? '#73B2D8'\n                                : density > 0.5 ? '#BAD6EB'\n                                    : density > 0.25 ? '#D1E2F3'\n                                        : density > 0.1 ? '#E4EFF9'\n                                            : '#F7FBFF';\n    })\n\n\n\n    const DistrictStyle = (feature => {\n\n        const getDensityFromSummerData = (id) => {\n            const DataItem = selectedData.find(item => item.ID === id);\n            return DataItem ? DataItem.MaxFraction : null;\n\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n        return ({\n            fillColor: DistrictDensity(density),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 1\n        });\n\n\n\n    });\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n\n            <div className='main_dashboard'>\n                <div className='left_panel'>\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            value={selectedView}\n                            onChange={handleViewSelection}\n                            id=\"session\"\n                            options={[\n                                \"State Wise\",\n                                \"District Wise\",\n                            ]}\n                            renderInput={(params) => (\n                                <TextField {...params} className=\"form-select mb-3\" label=\"Select Dataset\" />\n                            )}\n                        />\n\n\n                    </div>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <label className=\"form-label\">Filter Data:</label>\n\n                        <Autocomplete\n                            style={{ marginBottom: \"20px\" }}\n                            onChange={(event, value) => handleStateSelect(event, value)}\n                            id=\"state\"\n                            getOptionLabel={(state) => `${state}`}\n                            options={[...new Set(IndiaStates.features.map((item) => item.properties.STATE))]}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            noOptionsText={\"No Available Data\"}\n                            disabled={!selectedView}\n                            renderOption={(props, state) => (\n                                <Box component=\"li\" {...props} key={state}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {state}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params} label=\"Search State\" />}\n                        />\n\n                        {selectedView === \"District Wise\" && (\n                            <Autocomplete\n                                style={{ marginBottom: \"20px\" }}\n                                onChange={(event, value) => handleDistrictSelect(event, value)}\n                                id=\"district\"\n                                getOptionLabel={(district) => `${district}`}\n                                options={[...new Set(districtList.map((item) => item.properties.DISTRICT))]}\n                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                noOptionsText={\"No Available Data\"}\n                                disabled={districtList.length === 0}\n                                renderOption={(props, district) => (\n                                    <Box component=\"li\" {...props} key={district}\n                                        sx={{\n                                            fontSize: \"14px\",\n                                        }}>\n                                        {district}\n                                    </Box>\n                                )}\n                                renderInput={(params) => <TextField {...params}\n\n                                    label=\"Search District\" />}\n                            />\n                        )}\n\n\n\n\n                    </div>\n\n\n                </div>\n\n\n\n                <div className='right_panel'>\n                    <MapContainer\n                        fullscreenControl={true}\n\n                        center={mapCenter}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialMapZoom()}\n                        maxBounds={maxBounds}\n                        // maxZoom={8}\n                        minZoom={setInitialMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        // attributionControl={false}\n                        // scrollWheelZoom={false}\n                        doubleClickZoom={false}\n                    >\n                        <SearchBar />\n\n\n                        {filteredIndiaDistrict && (\n                            <FiltererdJsonData\n                                selectedState={selectedState}\n                                selectedDistrict={selectedDistrict}\n                                // DistrictStyle={DistrictStyle}\n                                filteredIndiaDistrict={filteredIndiaDistrict}\n                            // DistrictOnEachfeature={DistrictOnEachfeature}\n                            />\n\n\n                        )}\n\n                        <GeoJSON\n                            key={selectedView}\n                            style={DistrictStyle}\n                            data={selectedGeoJSonData}\n                            onEachFeature={DistrictOnEachfeature}\n                        />\n\n\n\n\n\n\n                        {selectedView && (\n                            <div className=\"legend-panel-desktop\">\n                                <MaxFloodLegend />\n                            </div>\n                        )}\n\n\n\n\n\n\n                        <BaseMap />\n\n                    </MapContainer>\n\n                    {selectedView && (\n                        <div className=\"legend-panel-mobile\">\n                            <MaxFloodLegend />\n                        </div>\n                    )}\n\n\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default MaxFloodPage"],"names":["MaxFloodLegend","_jsx","_Fragment","children","_jsxs","className","style","backgroundColor","MaxFloodPage","selectedView","setSelectedView","useState","districtList","setDistrictList","selectedState","setSelectedState","filteredIndiaDistrict","setFilteredIndiaDistrict","selectedDistrict","setSelectedDistrict","selectedData","selectedGeoJSonData","Districts_max_flood_area_frac","IndiaDistricts","States_max_flood_area_frac","IndiaStates","DistrictDensity","density","Autocomplete","value","onChange","handleViewSelection","event","id","options","renderInput","params","TextField","label","marginBottom","handleStateSelect","items","features","filter","item","properties","STATE","Set","map","sort","filteredStateFeatures","feature","type","getOptionLabel","state","concat","isOptionEqualToValue","option","Name","noOptionsText","disabled","renderOption","props","_createElement","Box","component","key","sx","fontSize","handleDistrictSelect","filteredDistrictFeatures","DISTRICT","district","length","MapContainer","fullscreenControl","center","mapCenter","width","height","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","FiltererdJsonData","GeoJSON","DataItem","find","ID","MaxFraction","getDensityFromSummerData","fillColor","weight","opacity","color","dashArray","fillOpacity","data","onEachFeature","layer","on","e","popupContent","MaxArea","bindTooltip","sticky","openTooltip","closeTooltip","BaseMap"],"sourceRoot":""}