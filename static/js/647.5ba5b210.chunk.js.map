{"version":3,"file":"static/js/647.5ba5b210.chunk.js","mappings":"uQACA,MAiDA,EAjD0BA,IAAa,IAAZ,KAACC,GAAKD,EAC7B,OACIE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAEQC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQF,SAAA,EACnBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,UACzBC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,wCAAsCH,QAU7CI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcF,SAAA,EACzBF,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,cAC5BN,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAACC,gBAAiB,iBAGhCH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EACxBF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,UAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,WAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,UAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,QAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,SAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,SAChCF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBF,SAAC,eAK7C,E,+DCxCX,MAkJA,EAlJyBJ,IAA+G,IAA9G,aAAES,EAAY,qBAAEC,EAAoB,kBAAEC,EAAiB,cAAEC,EAAa,iBAAEC,EAAgB,aAAEC,GAAcd,EAC9H,MAAOe,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IAI3CG,EAAAA,EAAAA,YAAU,KACN,GAAIX,GAAgBE,EAAmB,CACjBU,WACd,IACIL,GAAW,GAEX,MAAMM,EAAQ,GAAAC,OAAMd,EAAae,QAAQ,IAAK,KAAI,2BAG5CC,QAAiBC,MAAM,sDAADH,OAAuDD,IAG7EK,SAF0BF,EAASG,QAEGC,MAAKC,GAAQA,EAAKC,KAAOpB,IACrEQ,EAAaQ,GAEbX,GAAW,EAEf,CAAE,MAAOgB,GACLC,QAAQD,MAAM,0CAA2CA,EAC7D,GAEJE,EACJ,IACD,CAACzB,EAAcE,IAOlB,MAAMwB,EAAQjB,GAAakB,OAAOC,KAAKnB,GAAWoB,QAAOC,GAAe,OAARA,IAAcC,KAAIvC,GAAQwC,SAASxC,KAU7FyC,EAAa,CAAC,CAChBC,KAAM,wBACNC,KAVe1B,GAAakB,OAAOC,KAAKnB,GACvCoB,QAAOC,GAAe,OAARA,IACdC,KAAID,GAAOrB,EAAUqB,KACrBD,QAAOO,GAAsB,kBAARA,IACrBL,KAAIK,GAAOA,EAAIC,QAAQ,OAa5B,OACIzC,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBF,SAAA,CAEb,kBAAjBK,GACGJ,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,qCACmCS,EAAiB,KAAGD,EAAc,OAAKE,KAG7D,eAAjBL,GACAJ,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,qCACmCQ,EAAc,QAAME,KAI3D,MAGJZ,EAAAA,EAAAA,KAAA,UAAQI,UAAU,kBAAkByC,QAASrC,EAAqBN,UAACF,EAAAA,EAAAA,KAAC8C,EAAAA,IAAS,SAGhFN,GAAcP,IAAUpB,GACrBb,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CACFC,QAAS,CACLC,MAAO,CACHC,KAAM,OACNC,SAAS,EACTC,KAAM,CACFF,KAAM,IACNG,SAAS,EACTC,gBAAgB,GAEpBC,QAAS,CACLC,aAAc,QAElBC,WAAY,CACRJ,SAAS,IAKjBK,MAAO,CACHC,WAAY1B,EACZ2B,MAAO,CACHC,KAAM,OACNC,QAAS,KAGjBC,MAAO,CACHH,MAAO,CACHC,KAAM,wBACNG,QAAS,KAGjBC,WAAY,CAAC,CACTC,WAAY,IACZlB,QAAS,CACLmB,OAAQ,CACJC,SAAU,SACVN,SAAU,GACVE,QAAS,OAKzBK,OAAQ7B,EACRU,KAAK,OACLoB,MAAM,OACNC,OAAO,UAMPvE,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAACiE,MAAM,OAAQC,OAAO,QAAQrE,UACtCF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBF,UACjCF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,qBAUjC,ECkTX,EAhbwBoE,KACpB,MAAO5D,EAAc6D,IAAmB1D,EAAAA,EAAAA,UAAS,OAC1CR,EAAcmE,IAAmB3D,EAAAA,EAAAA,UAAS,KAC1CF,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChC4D,EAAcC,IAAmB7D,EAAAA,EAAAA,UAAS,KAC1C8D,EAAuBC,IAA4B/D,EAAAA,EAAAA,UAAS,OAC5DL,EAAeqE,IAAoBhE,EAAAA,EAAAA,UAAS,OAC5CJ,EAAkBqE,IAAuBjE,EAAAA,EAAAA,UAAS,OAClDkE,EAAgBC,IAAqBnE,EAAAA,EAAAA,WAAS,GAC/CoE,GAAkBC,EAAAA,EAAAA,QAAO,OACxB3E,EAAmB4E,IAAwBtE,EAAAA,EAAAA,UAAS,OACpDuE,EAAiBC,IAAsBxE,EAAAA,EAAAA,UAAS,OAChDyE,EAAqBC,IAA0B1E,EAAAA,EAAAA,UAAS,OAG/DG,EAAAA,EAAAA,YAAU,KACN,GAAIX,EAAe,CACGY,WACd,IACIL,GAAW,GAEX,MAAMM,EAAQ,GAAAC,OAAMd,EAAae,QAAQ,IAAK,KAAI,2BAG5CC,QAAiBC,MAAM,sDAADH,OAAuDD,IAC7EsE,QAAqBnE,EAASG,OAEpC6D,EAAmBG,GAEE,kBAAjBnF,EACAkF,EAAuBE,GACC,eAAjBpF,GACPkF,EAAuBG,GAM3B9E,GAAW,EAEf,CAAE,MAAOgB,GACLC,QAAQD,MAAM,0CAA2CA,EAC7D,GAEJE,EACJ,IACD,CAACzB,IAOJ,MAAMC,EAAuBA,KACzB0E,GAAmBD,EAAe,EA0GtC,MAAMY,EAAmBC,GACdA,EAAU,GAAK,UAChBA,EAAU,GAAK,UACXA,EAAU,GAAK,UACXA,EAAU,EAAI,UACVA,EAAU,EAAI,UACVA,EAAU,EAAI,UACVA,EAAU,GAAM,UACZA,EAAU,IAAO,UACbA,EAAU,GAAM,UACZ,UA+B1C,OACI9F,EAAAA,EAAAA,KAAA,OAAKI,UAAU,0BAAyBF,UAEpCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBF,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYF,SAAA,EAEvBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mCAAkCF,UAC7CF,EAAAA,EAAAA,KAAC+F,EAAAA,EAAY,CACTC,MAAOzF,EACP0F,SAzJIC,CAACC,EAAOH,KAChCtB,EAAgBsB,GAChBX,EAAqB,MACrBH,GAAkB,GAClBH,EAAiB,MACjBC,EAAoB,MACpBF,EAAyB,MACzBL,EAAgB,KAAK,EAmJD2B,GAAG,UACHpD,QAAS,CACL,aACA,iBAEJqD,YAAcC,IACVtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,IAAKD,EAAQlG,UAAU,mBAAmBoG,MAAM,wBAOtExG,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mCAAkCF,UAC7CF,EAAAA,EAAAA,KAAC+F,EAAAA,EAAY,CACTE,SAAUA,CAACE,EAAOH,IA/GjBS,EAACN,EAAOH,KAC7BvB,EAAgBuB,EAAM,EA8G0BS,CAAiBN,EAAOH,GACpDI,GAAG,OACHJ,MAAOpF,EACPoC,QAAS0D,MAAMC,KAAK,CAAEC,OAAQ,MAAe,CAACC,EAAGC,IAAK,GAAAzF,OAAQ,KAAOyF,KACrEC,cAAc,oBACdC,aAAcA,CAACC,EAAOlH,KAClBmH,EAAAA,EAAAA,eAACC,EAAAA,EAAG,CAACC,UAAU,QAASH,EAAO5E,IAAKtC,EAChCsH,GAAI,CACAC,SAAU,SAEbvH,GAGTsG,YAAcC,IACVtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,IACFD,EACJE,MAAM,cACNpG,UAAU,cACV,aAAW,gCAS3BD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCF,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,SAAOI,UAAU,aAAYF,SAAC,kBAE9BF,EAAAA,EAAAA,KAAC+F,EAAAA,EAAY,CACT1F,MAAO,CAAEkH,aAAc,QACvBtB,SAAUA,CAACE,EAAOH,IA9LhBwB,EAACrB,EAAOH,KAC9B,IAAIyB,EAAQ9B,EAAe+B,SAAStF,QAAQR,GAASA,EAAK+F,WAAWC,QAAU5B,IAC/EyB,EAAQ,IAAI,IAAII,IAAIJ,EAAMnF,KAAKV,GAASA,MACxC6F,EAAMK,OAENlD,EAAgB6C,GAChB1C,EAAiBiB,GAEjB,IAAI+B,EAAwBvC,EAAoBkC,SAAStF,QAAQ4F,GAAYA,EAAQL,WAAWC,QAAU5B,IAG1GlB,EAAyB,CACrB5B,KAAM,oBACNwE,SAAUK,IAGO,eAAjBxH,GACA8E,EAAqB0C,EAAsB,GAAGJ,WAAW9F,GAC7D,EA4KgD2F,CAAkBrB,EAAOH,GACrDI,GAAG,QACHJ,MAAOtF,EACPuH,eAAiBC,GAAK,GAAA7G,OAAQ6G,GAC9BlF,QAAS,IAAI,IAAI6E,IAAIjC,EAAY8B,SAASpF,KAAKV,GAASA,EAAK+F,WAAWC,UACxEO,qBAAsBA,CAACC,EAAQpC,IAAUoC,EAAOC,OAASrC,EAAMqC,KAC/DtB,cAAe,oBACfuB,UAAW/H,EACXyG,aAAcA,CAACC,EAAOiB,KAClBhB,EAAAA,EAAAA,eAACC,EAAAA,EAAG,CAACC,UAAU,QAASH,EAAO5E,IAAK6F,EAChCb,GAAI,CACAC,SAAU,SAEbY,GAGT7B,YAAcC,IAAWtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,IAAKD,EAAQE,MAAM,mBAGxC,kBAAjBjG,IACGP,EAAAA,EAAAA,KAAC+F,EAAAA,EAAY,CACTC,MAAOrF,EACPN,MAAO,CAAEkH,aAAc,QACvBtB,SAAUA,CAACE,EAAOH,IA3LjBuC,EAACpC,EAAOH,KACjChB,EAAoBgB,GAEpB,IAAIwC,EAA2B7C,EAAe+B,SAAStF,QAAQ4F,GAAYA,EAAQL,WAAWc,WAAazC,GAASgC,EAAQL,WAAWC,QAAUlH,IAEjJoE,EAAyB,CACrB5B,KAAM,oBACNwE,SAAUc,IAEO,kBAAjBjI,GACA8E,EAAqBmD,EAAyB,GAAGb,WAAW9F,GAChE,EAgLoD0G,CAAqBpC,EAAOH,GACxDI,GAAG,WACH6B,eAAiBS,GAAQ,GAAArH,OAAQqH,GACjC1F,QAAS,IAAI,IAAI6E,IAAIlD,EAAarC,KAAKV,GAASA,EAAK+F,WAAWc,aAChEN,qBAAsBA,CAACC,EAAQpC,IAAUoC,EAAOC,OAASrC,EAAMqC,KAC/DtB,cAAe,oBACfuB,SAAkC,IAAxB3D,EAAaiC,OACvBI,aAAcA,CAACC,EAAOyB,KAClBxB,EAAAA,EAAAA,eAACC,EAAAA,EAAG,CAACC,UAAU,QAASH,EAAO5E,IAAKqG,EAChCrB,GAAI,CACAC,SAAU,SAEboB,GAGTrC,YAAcC,IAAWtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,IAAKD,EAEpCE,MAAM,0BAOtBxG,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,UACzBF,EAAAA,EAAAA,KAAA,UAAQkD,KAAK,SAASoF,UAAW/H,IAAiBK,IAAiBH,EAAmBoC,QAASrC,EAAqBN,SAC/G+E,EAAiB,kBAAoB,0BAWlD9E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAcuI,IAAKxD,EAAgBjF,SAAA,EAE9CC,EAAAA,EAAAA,MAACyI,EAAAA,EAAY,CACTC,mBAAmB,EAEnBC,OAAQC,EAAAA,GACR1I,MAAO,CAAEiE,MAAO,OAAQC,OAAQ,OAAQjE,gBAAiB,QAAS0I,OAAQ,OAAQC,OAAQ,QAC1F7F,MAAM8F,EAAAA,EAAAA,MACNC,UAAWA,EAAAA,GAEXC,SAASF,EAAAA,EAAAA,MACTG,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MAGVC,iBAAiB,EAAMtJ,SAAA,EAEvBF,EAAAA,EAAAA,KAACyJ,EAAAA,EAAS,IAITxE,GAAkBxE,IACfT,EAAAA,EAAAA,KAAA,OAAKI,UAAU,wBAAuBF,UAClCF,EAAAA,EAAAA,KAAC0J,EAAgB,CACbnJ,aAAcA,EACdC,qBAAsBA,EAEtBC,kBAAmBA,EACnBE,iBAAkBA,EAClBD,cAAeA,EACfE,aAAcA,MAMzBL,GAAiBiF,GAAuB5E,GAAgB0E,IACrDnF,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CAEK2E,IACG7E,EAAAA,EAAAA,KAAC2J,EAAAA,EAAiB,CACdjJ,cAAeA,EACfC,iBAAkBA,EAElBkE,sBAAuBA,KAO/B7E,EAAAA,EAAAA,KAAC4J,EAAAA,EACG,CAGAvJ,MArMT2H,IAEnB,MAMMlC,EAN4BM,KAC9B,MAAMyD,EAAWvE,GAAmBA,EAAgB3D,MAAKC,GAAQA,EAAKC,KAAOuE,IAC7E,OAAOyD,EAAWA,EAASjJ,GAAgB,IAAI,EAInCkJ,CAAyB9B,EAAQL,WAAW9F,IAC5D,MAAQ,CACJkI,UAAWlE,EAAgBC,GAC3BkE,OAAQ,EACRC,QAAS,EACTC,MAAO,QACPC,UAAW,IACXC,YAAa,EAChB,EAsL2B1H,KAAM8C,EAAoBkC,SAC1B2C,cA1PhC,SAA+BrC,EAASsC,GACpCA,EAAMC,GAAG,aAAa,WAClB,MAAMV,EAAWvE,GAAmBA,EAAgB3D,MAAKC,GAAQA,EAAKC,KAAOmG,EAAQL,WAAW9F,KAChG,GAAIjB,GAAgBoH,EAAQL,YAAcK,EAAQL,WAAW9F,GAAI,CAC7D,IAAI2I,EACiB,kBAAjBjK,EACAiK,EAAY,sCAAAnJ,OAEd2G,EAAQL,WAAW9F,GAAE,iCAAAR,OACf2G,EAAQL,WAAWc,SAAQ,8BAAApH,OAC9B2G,EAAQL,WAAWC,MAAK,qDAAAvG,OACDwI,EAAWA,EAASjJ,GAAgB,KAAI,qCAGxC,eAAjBL,IACPiK,EAAY,sCAAAnJ,OAEd2G,EAAQL,WAAW9F,GAAE,8BAAAR,OAClB2G,EAAQL,WAAWC,MAAK,qDAAAvG,OACDwI,EAAWA,EAASjJ,GAAgB,KAAI,sCAIpE0J,EAAMG,YAAYD,EAAc,CAAEE,QAAQ,GAC9C,CACAJ,EAAMK,aACV,IAEAL,EAAMC,GAAG,YAAY,WACjBD,EAAMM,cACV,GACJ,GAuNqCrK,EAAeiF,EAAoBkC,SAASd,OAAOhG,IAQ5DZ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBF,UACjCF,EAAAA,EAAAA,KAAC6K,EAAiB,CAAC9K,KAAMa,UAQrCZ,EAAAA,EAAAA,KAAC8K,EAAAA,EAAO,OAMXlK,IACGZ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAAqBF,UAChCF,EAAAA,EAAAA,KAAC6K,EAAiB,CAAC9K,KAAMa,MAMhCC,IACGb,EAAAA,EAAAA,KAAA,OAAKI,UAAU,qCAAoCF,UAC/CF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBF,UACjCF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,sBAU/BS,IACGb,EAAAA,EAAAA,KAAA,OAAKI,UAAU,oCAAmCF,UAC9CF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBF,UACjCF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,uBAU9B,C","sources":["components/AnnualFloodLegend.js","components/TimeSeriesCharts.js","pages/AnnualFloodPage.js"],"sourcesContent":["import React from 'react'\nconst AnnualFloodLegend = ({year}) => {\n    return (\n        <>\n\n                <div className=\"legend\">\n                    <div className=\"item-heading\">\n                        <p>Annual Max. Flooded Area (%) in year {year}</p>\n                    </div>\n                    {/* <div className=\"legend-item\">\n                        <p className=\"legend-color-value\"> Exceptional</p>\n                        <p className=\"legend-color-value\"> Extreme</p>\n                        <p className=\"legend-color-value\"> Severe</p>\n                        <p className=\"legend-color-value\"> Moderate</p>\n                        <p className=\"legend-color-value\"> Abnormal</p>\n                        <p className=\"legend-color-value\"> Normal</p>\n                    </div> */}\n                    <div className=\"legend-color\">\n                        <i style={{backgroundColor: '#F7FBFF'}}></i>\n                        <i style={{backgroundColor: '#E4EFF9'}}></i>\n                        <i style={{backgroundColor: '#D1E2F3'}}></i>\n                        <i style={{backgroundColor: '#BAD6EB'}}></i>\n                        <i style={{backgroundColor: '#73B2D8'}}></i>\n                        <i style={{backgroundColor: '#539DCC'}}></i>\n                        <i style={{backgroundColor: '#3585BF'}}></i>\n                        <i style={{backgroundColor: '#1E6CB1'}}></i>\n                        <i style={{backgroundColor: '#08519C'}}></i>\n                        <i style={{backgroundColor: '#09306B'}}></i>\n                    </div>\n\n                    <div className=\"legend-item\">\n                        <p className=\"legend-num-value\"> 0</p>\n                        <p className=\"legend-num-value\"> 0.1</p>\n                        <p className=\"legend-num-value\"> 0.25</p>\n                        <p className=\"legend-num-value\"> 0.5</p>\n                        <p className=\"legend-num-value\"> 1</p>\n                        <p className=\"legend-num-value\"> 2</p>\n                        <p className=\"legend-num-value\"> 5</p>\n                        <p className=\"legend-num-value\"> 10</p>\n                        <p className=\"legend-num-value\"> 15</p>\n                        <p className=\"legend-num-value\"> 30</p>\n                    </div>\n\n                </div>\n\n        </>\n\n    )\n}\n\nexport default AnnualFloodLegend","import React, { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { IoMdClose } from \"react-icons/io\";\n\n\nconst TimeSeriesCharts = ({ selectedView, handleShowTimeseries, selectedFeatureID, selectedState, selectedDistrict, selectedYear }) => {\n    const [loading, setLoading] = useState(false);\n    const [chartData, setChartData] = useState(false);\n\n\n\n    useEffect(() => {\n        if (selectedView && selectedFeatureID) {\n            const fetchData = async () => {\n                try {\n                    setLoading(true);\n\n                    const endpoint = `${selectedView.replace(\" \", \"_\")}_annual_flood_area.json`;\n\n                    // Fetching data from the API\n                    const response = await fetch(`https://wcl-iitgn.github.io/india-flood-atlas-data/${endpoint}`);\n                    const selectedChartData = await response.json();\n\n                    const filteredChartData = selectedChartData.find(item => item.ID === selectedFeatureID);\n                    setChartData(filteredChartData)\n\n                    setLoading(false);\n\n                } catch (error) {\n                    console.error(\"Error fetching and filtering wind data:\", error);\n                }\n            };\n            fetchData();\n        }\n    }, [selectedView, selectedFeatureID]);\n\n\n\n\n\n\n    const years = chartData && Object.keys(chartData).filter(key => key !== 'ID').map(year => parseInt(year));\n\n    const floodAreas = chartData && Object.keys(chartData)\n        .filter(key => key !== 'ID')\n        .map(key => chartData[key])\n        .filter(val => typeof val === 'number')\n        .map(val => val.toFixed(2));\n\n\n    // Prepare the series data for the chart\n    const seriesData = [{\n        name: 'Flooded Area (km²)',\n        data: floodAreas\n    }];\n\n\n\n\n\n    return (\n        <>\n            <div className='timeseries_heading'>\n\n                {selectedView === 'District Wise' ? (\n                    <h4>\n                        Annual Flooded Area Timeseries of {selectedDistrict}, {selectedState} in {selectedYear}\n\n                    </h4>\n                ) : selectedView === 'State Wise' ? (\n                    <h4>\n                        Annual Flooded Area Timeseries of {selectedState}  in {selectedYear}\n\n                    </h4>\n                ) : (\n                    null\n                )}\n\n                <button className='chart_close_btn' onClick={handleShowTimeseries}><IoMdClose /></button>\n            </div>\n\n            {seriesData && years && !loading ? (\n                <Chart\n                    options={{\n                        chart: {\n                            type: 'line',\n                            stacked: false,\n                            zoom: {\n                                type: 'x',\n                                enabled: true,\n                                autoScaleYaxis: true\n                            },\n                            toolbar: {\n                                autoSelected: 'zoom'\n                            },\n                            dataLabels: {\n                                enabled: false\n                            },\n\n\n                        },\n                        xaxis: {\n                            categories: years,\n                            title: {\n                                text: 'Time',\n                                offsetX: 10\n                            }\n                        },\n                        yaxis: {\n                            title: {\n                                text: 'Flooded Area (km²)',\n                                offsetY: 10\n                            }\n                        },\n                        responsive: [{\n                            breakpoint: 480,\n                            options: {\n                                legend: {\n                                    position: 'bottom',\n                                    offsetX: -10,\n                                    offsetY: 0\n                                }\n                            }\n                        }]\n                    }}\n                    series={seriesData}\n                    type=\"line\"\n                    width=\"100%\"\n                    height=\"100%\"\n                />\n\n\n            )\n                : (\n                    <div style={{width:\"100%\", height:\"100%\"}}>\n                        <div className=\"map_loader_container\">\n                            <span className=\"map_loader\"></span>\n                        </div>\n\n                    </div>\n\n                )}\n\n\n\n\n        </>\n\n    );\n};\n\nexport default TimeSeriesCharts;\n","import React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport BaseMap from '../components/BaseMap';\nimport SearchBar from '../components/SearchBar';\nimport IndiaDistricts from '../assets/data/IndiaDistricts.json';\nimport AnnualFloodLegend from '../components/AnnualFloodLegend';\nimport IndiaStates from '../assets/data/IndiaStates.json';\nimport { Box } from \"@mui/system\";\nimport FiltererdJsonData from './FiltererdJsonData';\nimport { mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/functions';\n\n\nimport TimeSeriesCharts from '../components/TimeSeriesCharts';\n\n\nconst AnnualFloodPage = () => {\n    const [selectedYear, setSelectedYear] = useState(null);\n    const [selectedView, setSelectedView] = useState(\"\")\n    const [loading, setLoading] = useState(false);\n    const [districtList, setDistrictList] = useState([]);\n    const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n    const [selectedState, setSelectedState] = useState(null);\n    const [selectedDistrict, setSelectedDistrict] = useState(null);\n    const [showTimeseries, setShowTimeseries] = useState(false)\n    const mapContainerRef = useRef(null);\n    const [selectedFeatureID, setSelectedFeatureID] = useState(null);\n    const [selectedMapData, setSelectedMapData] = useState(null)\n    const [selectedGeoJSonData, setSelectedGeoJSonData] = useState(null)\n\n\n    useEffect(() => {\n        if (selectedView ) {\n            const fetchData = async () => {\n                try {\n                    setLoading(true);\n\n                    const endpoint = `${selectedView.replace(\" \", \"_\")}_annual_flood_frac.json`;\n\n                    // Fetching data from the API\n                    const response = await fetch(`https://wcl-iitgn.github.io/india-flood-atlas-data/${endpoint}`);\n                    const selectedData = await response.json();\n\n                    setSelectedMapData(selectedData)\n\n                    if (selectedView === 'District Wise') {\n                        setSelectedGeoJSonData(IndiaDistricts)\n                    } else if (selectedView === 'State Wise') {\n                        setSelectedGeoJSonData(IndiaStates)\n                    }\n\n\n\n\n                    setLoading(false);\n\n                } catch (error) {\n                    console.error(\"Error fetching and filtering wind data:\", error);\n                }\n            };\n            fetchData();\n        }\n    }, [selectedView]);\n\n    \n\n\n\n\n    const handleShowTimeseries = () => {\n        setShowTimeseries(!showTimeseries)\n    }\n\n    const handleViewSelection = (event, value) => {\n        setSelectedView(value);\n        setSelectedFeatureID(null)\n        setShowTimeseries(false)\n        setSelectedState(null)\n        setSelectedDistrict(null)\n        setFilteredIndiaDistrict(null)\n        setSelectedYear(null)\n\n    };\n\n    const handleStateSelect = (event, value) => {\n        let items = IndiaDistricts.features.filter((item) => item.properties.STATE === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setDistrictList(items);\n        setSelectedState(value)\n\n        let filteredStateFeatures = selectedGeoJSonData.features.filter((feature) => feature.properties.STATE === value);\n\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredStateFeatures,\n        });\n\n        if (selectedView === 'State Wise') {\n            setSelectedFeatureID(filteredStateFeatures[0].properties.ID)\n        }\n\n\n    };\n\n\n\n\n    const handleDistrictSelect = (event, value) => {\n        setSelectedDistrict(value)\n\n        let filteredDistrictFeatures = IndiaDistricts.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredDistrictFeatures,\n        });\n        if (selectedView === 'District Wise') {\n            setSelectedFeatureID(filteredDistrictFeatures[0].properties.ID)\n        }\n\n\n\n\n\n    };\n\n\n\n    const handleYearChange = (event, value) => {\n        setSelectedYear(value);\n    };\n\n\n\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        layer.on('mouseover', function () {\n            const DataItem = selectedMapData && selectedMapData.find(item => item.ID === feature.properties.ID);\n            if (selectedYear && feature.properties && feature.properties.ID) {\n                let popupContent;\n                if (selectedView === 'District Wise') {\n                    popupContent = `\n          <div>\n            ID: ${feature.properties.ID}<br/>\n            DISTRICT: ${feature.properties.DISTRICT}<br/>\n            STATE: ${feature.properties.STATE}<br/>\n            Annual Max. Flooded Area (%): ${DataItem ? DataItem[selectedYear] : null}<br/>\n          </div>\n        `;\n                } else if (selectedView === 'State Wise') {\n                    popupContent = `\n          <div>\n            ID: ${feature.properties.ID}<br/>\n            STATE: ${feature.properties.STATE}<br/>\n            Annual Max. Flooded Area (%): ${DataItem ? DataItem[selectedYear] : null}<br/>\n          </div>\n        `;\n                }\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n\n    const DistrictDensity = (density => {\n        return density > 30 ? '#09306B'\n            : density > 15 ? '#08519C'\n                : density > 10 ? '#1E6CB1'\n                    : density > 5 ? '#3585BF'\n                        : density > 2 ? '#539DCC'\n                            : density > 1 ? '#73B2D8'\n                                : density > 0.5 ? '#BAD6EB'\n                                    : density > 0.25 ? '#D1E2F3'\n                                        : density > 0.1 ? '#E4EFF9'\n                                            : '#F7FBFF';\n    })\n\n\n\n\n    const DistrictStyle = (feature => {\n\n        const getDensityFromSummerData = (id) => {\n            const DataItem = selectedMapData && selectedMapData.find(item => item.ID === id);\n            return DataItem ? DataItem[selectedYear] : null;\n\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n        return ({\n            fillColor: DistrictDensity(density),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 1\n        });\n\n\n\n    });\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n\n            <div className='main_dashboard'>\n                <div className='left_panel'>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            value={selectedView}\n                            onChange={handleViewSelection}\n                            id=\"session\"\n                            options={[\n                                \"State Wise\",\n                                \"District Wise\",\n                            ]}\n                            renderInput={(params) => (\n                                <TextField {...params} className=\"form-select mb-3\" label=\"Select Dataset\" />\n                            )}\n                        />\n\n\n                    </div>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            onChange={(event, value) => handleYearChange(event, value)}\n                            id=\"year\"\n                            value={selectedYear}\n                            options={Array.from({ length: 2020 - 1900 }, (_, index) => `${1901 + index}`)}\n                            noOptionsText=\"No Available Data\"\n                            renderOption={(props, year) => (\n                                <Box component=\"li\" {...props} key={year}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {year}\n                                </Box>\n                            )}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Select Year\"\n                                    className=\"form-select\"\n                                    aria-label=\"Default select example\"\n                                />\n                            )}\n                        />\n\n                    </div>\n\n\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <label className=\"form-label\">Filter Data:</label>\n\n                        <Autocomplete\n                            style={{ marginBottom: \"20px\" }}\n                            onChange={(event, value) => handleStateSelect(event, value)}\n                            id=\"state\"\n                            value={selectedState}\n                            getOptionLabel={(state) => `${state}`}\n                            options={[...new Set(IndiaStates.features.map((item) => item.properties.STATE))]}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            noOptionsText={\"No Available Data\"}\n                            disabled={!selectedView}\n                            renderOption={(props, state) => (\n                                <Box component=\"li\" {...props} key={state}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {state}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params} label=\"Search State\" />}\n                        />\n\n                        {selectedView === \"District Wise\" && (\n                            <Autocomplete\n                                value={selectedDistrict}\n                                style={{ marginBottom: \"20px\" }}\n                                onChange={(event, value) => handleDistrictSelect(event, value)}\n                                id=\"district\"\n                                getOptionLabel={(district) => `${district}`}\n                                options={[...new Set(districtList.map((item) => item.properties.DISTRICT))]}\n                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                noOptionsText={\"No Available Data\"}\n                                disabled={districtList.length === 0}\n                                renderOption={(props, district) => (\n                                    <Box component=\"li\" {...props} key={district}\n                                        sx={{\n                                            fontSize: \"14px\",\n                                        }}>\n                                        {district}\n                                    </Box>\n                                )}\n                                renderInput={(params) => <TextField {...params}\n\n                                    label=\"Search District\" />}\n                            />\n                        )}\n\n\n                    </div>\n\n                    <div className='panel_button'>\n                        <button type='button' disabled={!selectedView || !selectedYear || !selectedFeatureID} onClick={handleShowTimeseries}>\n                            {showTimeseries ? \"Hide Timeseries\" : \"Show Timeseries\"}\n                        </button>\n                    </div>\n\n\n\n\n                </div>\n\n\n\n                <div className='right_panel' ref={mapContainerRef}>\n\n                    <MapContainer\n                        fullscreenControl={true}\n\n                        center={mapCenter}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialMapZoom()}\n                        maxBounds={maxBounds}\n                        // maxZoom={8}\n                        minZoom={setInitialMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        // attributionControl={false}\n                        // scrollWheelZoom={false}\n                        doubleClickZoom={false}\n                    >\n                        <SearchBar />\n                        {/* <ExportMapButton mapContainerRef={mapContainerRef} selectedYear={selectedYear} selectedSession={selectedView} /> */}\n\n\n                        {showTimeseries && selectedFeatureID && (\n                            <div className='time_series_container'>\n                                <TimeSeriesCharts\n                                    selectedView={selectedView}\n                                    handleShowTimeseries={handleShowTimeseries}\n                                    // selectedChartData={selectedChartData} \n                                    selectedFeatureID={selectedFeatureID}\n                                    selectedDistrict={selectedDistrict}\n                                    selectedState={selectedState}\n                                    selectedYear={selectedYear}\n                                />\n                            </div>\n                        )}\n\n\n                        {selectedView &&  selectedGeoJSonData && selectedYear && selectedMapData && (\n                            <>\n\n                                {filteredIndiaDistrict && (\n                                    <FiltererdJsonData\n                                        selectedState={selectedState}\n                                        selectedDistrict={selectedDistrict}\n                                        // DistrictStyle={DistrictStyle}\n                                        filteredIndiaDistrict={filteredIndiaDistrict}\n                                    // DistrictOnEachfeature={DistrictOnEachfeature}\n                                    />\n\n\n                                )}\n\n                                <GeoJSON\n                                    // key={`${selectedView}+${selectedYear}`}\n                                    key={selectedView + selectedGeoJSonData.features.length+selectedYear}\n\n                                    style={DistrictStyle}\n                                    data={selectedGeoJSonData.features}\n                                    onEachFeature={DistrictOnEachfeature}\n                                />\n\n\n                                <div className=\"legend-panel-desktop\">\n                                    <AnnualFloodLegend year={selectedYear} />\n                                </div>\n                            </>\n\n\n                        )}\n\n\n                        <BaseMap />\n\n                    </MapContainer>\n\n\n\n                    {selectedYear && (\n                        <div className=\"legend-panel-mobile\">\n                            <AnnualFloodLegend year={selectedYear} />\n                        </div>\n                    )}\n\n\n\n                    {loading && (\n                        <div className='map_layer_loader_container_desktop'>\n                            <div className=\"map_loader_container\">\n                                <span className=\"map_loader\"></span>\n                            </div>\n\n                        </div>\n\n                    )}\n\n                </div>\n\n\n                {loading && (\n                    <div className='map_layer_loader_container_mobile'>\n                        <div className=\"map_loader_container\">\n                            <span className=\"map_loader\"></span>\n                        </div>\n\n                    </div>\n\n                )}\n\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default AnnualFloodPage"],"names":["_ref","year","_jsx","_Fragment","children","_jsxs","className","style","backgroundColor","selectedView","handleShowTimeseries","selectedFeatureID","selectedState","selectedDistrict","selectedYear","loading","setLoading","useState","chartData","setChartData","useEffect","async","endpoint","concat","replace","response","fetch","filteredChartData","json","find","item","ID","error","console","fetchData","years","Object","keys","filter","key","map","parseInt","seriesData","name","data","val","toFixed","onClick","IoMdClose","Chart","options","chart","type","stacked","zoom","enabled","autoScaleYaxis","toolbar","autoSelected","dataLabels","xaxis","categories","title","text","offsetX","yaxis","offsetY","responsive","breakpoint","legend","position","series","width","height","AnnualFloodPage","setSelectedYear","setSelectedView","districtList","setDistrictList","filteredIndiaDistrict","setFilteredIndiaDistrict","setSelectedState","setSelectedDistrict","showTimeseries","setShowTimeseries","mapContainerRef","useRef","setSelectedFeatureID","selectedMapData","setSelectedMapData","selectedGeoJSonData","setSelectedGeoJSonData","selectedData","IndiaDistricts","IndiaStates","DistrictDensity","density","Autocomplete","value","onChange","handleViewSelection","event","id","renderInput","params","TextField","label","handleYearChange","Array","from","length","_","index","noOptionsText","renderOption","props","_createElement","Box","component","sx","fontSize","marginBottom","handleStateSelect","items","features","properties","STATE","Set","sort","filteredStateFeatures","feature","getOptionLabel","state","isOptionEqualToValue","option","Name","disabled","handleDistrictSelect","filteredDistrictFeatures","DISTRICT","district","ref","MapContainer","fullscreenControl","center","mapCenter","border","margin","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","TimeSeriesCharts","FiltererdJsonData","GeoJSON","DataItem","getDensityFromSummerData","fillColor","weight","opacity","color","dashArray","fillOpacity","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","AnnualFloodLegend","BaseMap"],"sourceRoot":""}