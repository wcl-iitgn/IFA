{"version":3,"file":"static/js/254.3164c12e.chunk.js","mappings":"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","sources":["components/FloodRiskLegend.js","pages/FloodRiskPage.js"],"sourcesContent":["import React from 'react'\n\nconst FloodRiskLegend = ({heading}) => {\n    return (\n        <>\n\n                <div className=\"legend\">\n                    <div className=\"flood-risk-legend-heading\">\n                        <p>{heading}</p>\n                    </div>\n                    {/* <div className=\"legend-item\">\n                        <p className=\"legend-color-value\"> Exceptional</p>\n                        <p className=\"legend-color-value\"> Extreme</p>\n                        <p className=\"legend-color-value\"> Severe</p>\n                        <p className=\"legend-color-value\"> Moderate</p>\n                        <p className=\"legend-color-value\"> Abnormal</p>\n                        <p className=\"legend-color-value\"> Normal</p>\n                    </div> */}\n                    <div className=\"flood-legend-color\">\n                        <i style={{backgroundColor: '#FFFFCF'}}></i>\n                        <i style={{backgroundColor: '#FFEDA5'}}></i>\n                        <i style={{backgroundColor: '#FFD97E'}}></i>\n                        <i style={{backgroundColor: '#FFB258'}}></i>\n                        <i style={{backgroundColor: '#FF8D48'}}></i>\n                        <i style={{backgroundColor: '#FF8D48'}}></i>\n                        <i style={{backgroundColor: '#FF4E36'}}></i>\n                        <i style={{backgroundColor: '#ED1A28'}}></i>\n                        <i style={{backgroundColor: '#C6022D'}}></i>\n                        <i style={{backgroundColor: '#860128'}}></i>\n                    </div>\n\n                    <div className=\"legend-item\" style={{fontSize:\"12px\"}}>\n                        <p className=\"flood-legend-num-value\"> 0</p>\n                        <p className=\"flood-legend-num-value\"> 0.1</p>\n                        <p className=\"flood-legend-num-value\"> 0.2</p>\n                        <p className=\"flood-legend-num-value\"> 0.3</p>\n                        <p className=\"flood-legend-num-value\"> 0.4</p>\n                        <p className=\"flood-legend-num-value\"> 0.5</p>\n                        <p className=\"flood-legend-num-value\"> 0.6</p>\n                        <p className=\"flood-legend-num-value\"> 0.7</p>\n                        <p className=\"flood-legend-num-value\"> 0.8</p>\n                        <p className=\"flood-legend-num-value\"> 0.9</p>\n                    </div>\n\n                </div>\n\n        </>\n\n    )\n}\n\nexport default FloodRiskLegend","import React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, GeoJSON, useMap, TileLayer } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { maxBounds, setDragging, setInitialFloodRiskMapZoom, setInitialMapZoom } from '../helpers/functions';\n\nimport IndiaSubBasins from \"../assets/data/IndiaSubBasins.json\"\nimport IndiaDistricts from '../assets/data/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/IndiaStates.json';\nimport india_boundary from \"../assets/data/india_boundary.json\"\nimport FloodRiskLegend from '../components/FloodRiskLegend';\n\nconst FloodRiskPage = () => {\n    const [selectedView, setSelectedView] = useState(\"Subbasin Wise\")\n    const [selectedMapData, setSelectedMapData] = useState(null)\n    const [loading, setLoading] = useState(false);\n    const [selectedGeoJSonData, setSelectedGeoJSonData] = useState(null)\n\n\n\n\n    useEffect(() => {\n        if (selectedView) {\n            const fetchData = async () => {\n                try {\n                    setLoading(true);\n\n                    const endpoint = `${selectedView.replace(\" \", \"_\")}_flood_risk_data.json`;\n\n                    // Fetching data from the API\n                    const response = await fetch(`https://wcl-iitgn.github.io/india-flood-atlas-data/${endpoint}`);\n                    const selectedData = await response.json();\n\n                    setSelectedMapData(selectedData)\n                    if (selectedView === 'District Wise') {\n                        setSelectedGeoJSonData(IndiaDistricts)\n                    } else if (selectedView === 'State Wise') {\n                        setSelectedGeoJSonData(IndiaStates)\n                    }else if (selectedView === 'Subbasin Wise') {\n                        setSelectedGeoJSonData(IndiaSubBasins)\n                    }\n                    \n                    setLoading(false); \n\n                } catch (error) {\n                    console.error(\"Error fetching and filtering wind data:\", error);\n                }\n            };\n            fetchData();\n        }\n    }, [selectedView]);\n\n\n    const handleSelectChange = (e) => {\n        setSelectedView(e.target.value);\n    };\n\n\n\n    function DistrictOnEachfeature(feature, layer, selectedIndex) {\n        layer.on('mouseover', function (e) {\n            let tooltipContent = `<div>ID: ${feature.properties.ID}<br/>`;\n            tooltipContent += selectedView === \"State Wise\"\n                ? `State: ${feature.properties.STATE}<br/>`\n                : selectedView === \"District Wise\"\n                    ? `District: ${feature.properties.DISTRICT}<br/>`\n                    : selectedView === \"Subbasin Wise\"\n                        ? `Sub-basin: ${feature.properties.Name}<br/>`\n                        : '';\n\n            const DataItem = selectedMapData && selectedMapData.find(item => item.ID === feature.properties.ID);\n            if (DataItem) {\n                tooltipContent += `Normalized ${selectedIndex}: ${DataItem[selectedIndex]}</div>`;\n            } else {\n                tooltipContent += `Normalized ${selectedIndex}: N/A</div>`;\n            }\n            layer.bindTooltip(tooltipContent, { sticky: true });\n            layer.openTooltip();\n        });\n\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n\n    const DistrictDensity = (density => {\n        return density > 0.9 ? '#860128'\n            : density > 0.8 ? '#C6022D'\n                : density > 0.7 ? '#ED1A28'\n                    : density > 0.6 ? '#FF4E36'\n                        : density > 0.4 ? '#FF8D48'\n                            : density > 0.3 ? '#FFB258'\n                                : density > 0.2 ? '#FFD97E'\n                                    : density > 0.1 ? '#FFEDA5'\n                                        : density > 0 ? '#FFFFCF'\n                                            : 'white';\n    })\n\n\n\n\n    const DistrictStyle = (feature, parameter) => {\n        const getDensityFromSummerData = (id) => {\n            const DataItem = selectedMapData && selectedMapData.find(item => item.ID === id);\n            return DataItem ? DataItem[parameter] : null;\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n        return ({\n            fillColor: DistrictDensity(density),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 1\n        });\n    };\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n            <div className='flood_risk_maps_container' style={{ height: \"100%\" }}>\n\n\n                <div className='flood_risk_maps'>\n\n                    <MapContainer\n                        fullscreenControl={true}\n                        center={[23, 84]}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialFloodRiskMapZoom()}\n                        maxBounds={maxBounds}\n                        minZoom={setInitialFloodRiskMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        doubleClickZoom={false}\n                    >\n                        <TileLayer\n                            attribution=\"Tiles &copy; Esri\"\n                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n                        />\n\n                        <div className='flood_risk_data_option'>\n                            <select onChange={handleSelectChange} value={selectedView}>\n                                <option value=\"Subbasin Wise\">Sub-basin Wise</option>\n                                <option value=\"State Wise\">State Wise</option>\n                                <option value=\"District Wise\">District Wise</option>\n                            </select>\n                        </div>\n\n                        <div className='fllod_risk_map_heading'>\n                            <p> Vulnerability </p>\n                        </div>\n\n                        <div className=\"flood-legend-panel-desktop\">\n                            <FloodRiskLegend heading=\"Normalized Vulnerability Index\" />\n                        </div>\n\n                        <GeoJSON data={india_boundary}\n                            interactive={false}\n                            style={\n                                {\n                                    fillColor: \"white\",\n                                    color: \"black\",\n                                    fillOpacity: \"1\",\n                                    weight: \"1\"\n                                }\n                            }\n                        />\n\n                        {selectedGeoJSonData && selectedView && (\n                            <GeoJSON \n                            data={selectedGeoJSonData.features}\n                            key={selectedView + selectedGeoJSonData.features.length}\n                            style={(feature) => DistrictStyle(feature, \"Vulnerability\")}\n                            onEachFeature={(feature, layer) => DistrictOnEachfeature(feature, layer, \"Vulnerability\")}\n                        />\n                        )}\n                        \n\n                    </MapContainer>\n                </div>\n\n                <div className='flood_risk_maps'>\n                    <MapContainer\n                        fullscreenControl={true}\n                        center={[23, 84]}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialFloodRiskMapZoom()}\n                        maxBounds={maxBounds}\n                        minZoom={setInitialFloodRiskMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        doubleClickZoom={false}\n                    >\n                        <div className='fllod_risk_map_heading'>\n                            <p> Hazard </p>\n                        </div>\n\n                        <TileLayer\n                            attribution=\"Tiles &copy; Esri\"\n                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n                        />\n                        <div className=\"flood-legend-panel-desktop\">\n                            <FloodRiskLegend heading=\"Normalized Hazard\" />\n                        </div>\n                        <GeoJSON data={india_boundary}\n                            interactive={false}\n                            style={\n                                {\n                                    fillColor: \"white\",\n                                    color: \"black\",\n                                    fillOpacity: \"1\",\n                                    weight: \"1\"\n                                }\n                            }\n                        />\n                        {selectedGeoJSonData && selectedView && (\n                            <GeoJSON \n                            data={selectedGeoJSonData.features}\n                            key={selectedView + selectedGeoJSonData.features.length}\n                            style={(feature) => DistrictStyle(feature, \"Hazard\")}\n                            onEachFeature={(feature, layer) => DistrictOnEachfeature(feature, layer, \"Hazard\")}\n                        />\n                        )}\n                        \n                    </MapContainer>\n                </div>\n\n                <div className='flood_risk_maps'>\n                    <MapContainer\n                        fullscreenControl={true}\n                        center={[23, 84]}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialFloodRiskMapZoom()}\n                        maxBounds={maxBounds}\n                        minZoom={setInitialFloodRiskMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        doubleClickZoom={false}\n                    >\n                        <div className='fllod_risk_map_heading'>\n                            <p> Exposure </p>\n                        </div>\n\n                        <div className=\"flood-legend-panel-desktop\">\n                            <FloodRiskLegend heading=\"Normalized Exposure\" />\n                        </div>\n                        <TileLayer\n                            attribution=\"Tiles &copy; Esri\"\n                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n                        />\n                        <GeoJSON data={india_boundary}\n                            interactive={false}\n                            style={\n                                {\n                                    fillColor: \"white\",\n                                    color: \"black\",\n                                    fillOpacity: \"1\",\n                                    weight: \"1\"\n                                }\n                            }\n                        />\n                        {selectedGeoJSonData && selectedView && (\n                            <GeoJSON \n                            data={selectedGeoJSonData.features}\n                            key={selectedView + selectedGeoJSonData.features.length}\n                            style={(feature) => DistrictStyle(feature, \"Exposure\")}\n                            onEachFeature={(feature, layer) => DistrictOnEachfeature(feature, layer, \"Exposure\")}\n                        />\n                        )}\n                        \n                    </MapContainer>\n                </div>\n\n                <div className='flood_risk_maps'>\n                    <MapContainer\n                        fullscreenControl={true}\n                        center={[23, 84]}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialFloodRiskMapZoom()}\n                        maxBounds={maxBounds}\n                        minZoom={setInitialFloodRiskMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        doubleClickZoom={false}\n                    >\n                        <div className='fllod_risk_map_heading'>\n                            <p> Risk </p>\n                        </div>\n\n                        <div className=\"flood-legend-panel-desktop\">\n                            <FloodRiskLegend heading=\"Normalized Risk\" />\n                        </div>\n                        <TileLayer\n                            attribution=\"Tiles &copy; Esri\"\n                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n                        />\n                        <GeoJSON data={india_boundary}\n                            interactive={false}\n                            style={\n                                {\n                                    fillColor: \"white\",\n                                    color: \"black\",\n                                    fillOpacity: \"1\",\n                                    weight: \"1\"\n                                }\n                            }\n                        />\n                        {selectedGeoJSonData && selectedView && (\n                            <GeoJSON \n                            data={selectedGeoJSonData.features}\n                            key={selectedView + selectedGeoJSonData.features.length}\n                            style={(feature) => DistrictStyle(feature, \"Risk\")}\n                            onEachFeature={(feature, layer) => DistrictOnEachfeature(feature, layer, \"Risk\")}\n                        />\n                        )}\n                        \n                    </MapContainer>\n                </div>\n\n            </div>\n\n            {loading && (\n                <div className='map_layer_loader_container_desktop' style={{width:\"100vw\"}}>\n                    <div className=\"map_loader_container\">\n                        <span className=\"map_loader\"></span>\n                    </div>\n\n                </div>\n\n            )}\n\n{loading && (\n                    <div className='map_layer_loader_container_mobile' style={{width:\"100vw\"}}>\n                        <div className=\"map_loader_container\">\n                            <span className=\"map_loader\"></span>\n                        </div>\n\n                    </div>\n\n                )}\n\n\n        </div>\n    );\n};\n\nexport default FloodRiskPage;\n"],"names":["_ref","heading","_jsx","_Fragment","children","_jsxs","className","style","backgroundColor","fontSize","FloodRiskPage","selectedView","setSelectedView","useState","selectedMapData","setSelectedMapData","loading","setLoading","selectedGeoJSonData","setSelectedGeoJSonData","useEffect","async","endpoint","concat","replace","response","fetch","selectedData","json","IndiaDistricts","IndiaStates","IndiaSubBasins","error","console","fetchData","DistrictOnEachfeature","feature","layer","selectedIndex","on","e","tooltipContent","properties","ID","STATE","DISTRICT","Name","DataItem","find","item","bindTooltip","sticky","openTooltip","closeTooltip","DistrictDensity","density","DistrictStyle","parameter","id","getDensityFromSummerData","fillColor","weight","opacity","color","dashArray","fillOpacity","height","MapContainer","fullscreenControl","center","width","border","margin","zoom","setInitialFloodRiskMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","TileLayer","attribution","url","onChange","target","value","FloodRiskLegend","GeoJSON","data","india_boundary","interactive","features","onEachFeature","length"],"sourceRoot":""}