{"version":3,"file":"static/js/597.1f5be58b.chunk.js","mappings":"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","sources":["components/MaxFloodLegend.js","pages/MaxFloodPage.js"],"sourcesContent":["import React from 'react'\nconst MaxFloodLegend = () => {\n    return (\n        <>\n\n                <div className=\"legend\">\n                    <div className=\"item-heading\">\n                        <p>Historical Max. Flooded Area (%)</p>\n                    </div>\n                    {/* <div className=\"legend-item\">\n                        <p className=\"legend-color-value\"> Exceptional</p>\n                        <p className=\"legend-color-value\"> Extreme</p>\n                        <p className=\"legend-color-value\"> Severe</p>\n                        <p className=\"legend-color-value\"> Moderate</p>\n                        <p className=\"legend-color-value\"> Abnormal</p>\n                        <p className=\"legend-color-value\"> Normal</p>\n                    </div> */}\n                    <div className=\"legend-color\">\n                        <i style={{backgroundColor: '#F7FBFF'}}></i>\n                        <i style={{backgroundColor: '#E4EFF9'}}></i>\n                        <i style={{backgroundColor: '#D1E2F3'}}></i>\n                        <i style={{backgroundColor: '#BAD6EB'}}></i>\n                        <i style={{backgroundColor: '#73B2D8'}}></i>\n                        <i style={{backgroundColor: '#539DCC'}}></i>\n                        <i style={{backgroundColor: '#3585BF'}}></i>\n                        <i style={{backgroundColor: '#1E6CB1'}}></i>\n                        <i style={{backgroundColor: '#08519C'}}></i>\n                        <i style={{backgroundColor: '#09306B'}}></i>\n                    </div>\n\n                    <div className=\"legend-item\">\n                        <p className=\"legend-num-value\"> 0</p>\n                        <p className=\"legend-num-value\"> 0.1</p>\n                        <p className=\"legend-num-value\"> 0.25</p>\n                        <p className=\"legend-num-value\"> 0.5</p>\n                        <p className=\"legend-num-value\"> 1</p>\n                        <p className=\"legend-num-value\"> 2</p>\n                        <p className=\"legend-num-value\"> 5</p>\n                        <p className=\"legend-num-value\"> 10</p>\n                        <p className=\"legend-num-value\"> 15</p>\n                        <p className=\"legend-num-value\"> 30</p>\n                    </div>\n\n                </div>\n\n        </>\n\n    )\n}\n\nexport default MaxFloodLegend","import React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, GeoJSON } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport BaseMap from '../components/BaseMap';\nimport SearchBar from '../components/SearchBar';\nimport IndiaDistricts from '../assets/data/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/IndiaStates.json';\nimport { mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/functions';\n\nimport FiltererdJsonData from './FiltererdJsonData';\nimport MaxFloodLegend from '../components/MaxFloodLegend';\n\n\nconst MaxFloodPage = () => {\n    const [selectedView, setSelectedView] = useState(\"\")\n\n    const [districtList, setDistrictList] = useState([]);\n    const [selectedState, setSelectedState] = useState([]);\n    const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n    const [selectedDistrict, setSelectedDistrict] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const [selectedMapData, setSelectedMapData] = useState(null)\n    const [selectedGeoJSonData, setSelectedGeoJSonData] = useState(null)\n\n\n\n    useEffect(() => {\n        if (selectedView) {\n            const fetchData = async () => {\n                try {\n                    setLoading(true);\n\n                    const endpoint = `${selectedView.replace(\" \", \"_\")}_max_flood_area_frac.json`;\n\n                    // Fetching data from the API\n                    const response = await fetch(`https://wcl-iitgn.github.io/india-flood-atlas-data/${endpoint}`);\n                    const selectedData = await response.json();\n\n\n                    setSelectedMapData(selectedData)\n\n                    if (selectedView === 'District Wise') {\n                        setSelectedGeoJSonData(IndiaDistricts)\n                    } else if (selectedView === 'State Wise') {\n                        setSelectedGeoJSonData(IndiaStates)\n                    }\n\n\n                    setLoading(false);\n\n                } catch (error) {\n                    console.error(\"Error fetching and filtering wind data:\", error);\n                }\n            };\n            fetchData();\n        }\n    }, [selectedView]);\n\n\n\n\n    const handleViewSelection = (event, value) => {\n        setSelectedView(value);\n        setFilteredIndiaDistrict(null)\n        setFilteredIndiaDistrict(null)\n    };\n\n\n\n    // let selectedGeoJSonData;\n\n    // if (selectedView === 'District Wise') {\n    //     selectedGeoJSonData = IndiaDistricts\n    // } else if (selectedView === 'State Wise') {\n    //     selectedGeoJSonData = IndiaStates\n    // }\n\n\n\n\n    const handleStateSelect = (event, value) => {\n        let items = IndiaDistricts.features.filter((item) => item.properties.STATE === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setDistrictList(items);\n        setSelectedState(value)\n\n        let filteredStateFeatures = selectedGeoJSonData.features.filter((feature) => feature.properties.STATE === value);\n\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredStateFeatures,\n        });\n\n        // mapRef.current.flyToBounds(bounds, { padding: [10, 10] });\n\n\n\n    };\n\n\n    const handleDistrictSelect = (event, value) => {\n        setSelectedDistrict(value)\n\n        let filteredDistrictFeatures = IndiaDistricts.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredDistrictFeatures,\n        });\n\n    };\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        if (selectedMapData) {\n\n            // layer.on('click', function (e) {\n            //     // setSelectedFeatureName(feature.properties.NAME);\n            //     setFilteredIndiaDistrict({\n            //         type: \"FeatureCollection\",\n            //         features: feature,\n            //     });\n\n            // });\n\n            layer.on('mouseover', function (e) {\n\n                const DataItem = selectedMapData && selectedMapData.find(item => item.ID === feature.properties.ID);\n                if (feature.properties && feature.properties.ID) {\n                    let popupContent;\n                    if (selectedView === 'District Wise') {\n                        popupContent = `\n              <div>\n                ID: ${feature.properties.ID}<br/>\n                DISTRICT: ${feature.properties.DISTRICT}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                Historical Max. Flooded Area:  ${DataItem ? DataItem.MaxArea : null} km²<br/>\n                Historical Max. Flooded Area (%): ${DataItem ? DataItem.MaxFraction : null}<br/>\n              </div>\n            `;\n                    } else if (selectedView === 'State Wise') {\n                        popupContent = `\n              <div>\n                ID: ${feature.properties.ID}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                Historical Max. Flooded Area:  ${DataItem ? DataItem.MaxArea : null} km²<br/>\n                Historical Max. Flooded Area (%): ${DataItem ? DataItem.MaxFraction : null}<br/>\n              </div>\n            `;\n                    }\n\n\n                    layer.bindTooltip(popupContent, { sticky: true });\n                }\n                layer.openTooltip();\n\n            }\n\n            );\n\n            layer.on('mouseout', function () {\n                layer.closeTooltip();\n            });\n        }\n    }\n\n\n\n    const DistrictDensity = (density => {\n        return density > 30 ? '#09306B'\n            : density > 15 ? '#08519C'\n                : density > 10 ? '#1E6CB1'\n                    : density > 5 ? '#3585BF'\n                        : density > 2 ? '#539DCC'\n                            : density > 1 ? '#73B2D8'\n                                : density > 0.5 ? '#BAD6EB'\n                                    : density > 0.25 ? '#D1E2F3'\n                                        : density > 0.1 ? '#E4EFF9'\n                                            : '#F7FBFF';\n    })\n\n\n\n    const DistrictStyle = (feature => {\n\n        const getDensityFromSummerData = (id) => {\n            const DataItem = selectedMapData && selectedMapData.find(item => item.ID === id);\n            return DataItem ? DataItem.MaxFraction : null;\n\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n        return ({\n            fillColor: DistrictDensity(density),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 1\n        });\n\n\n\n    });\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n\n            <div className='main_dashboard'>\n                <div className='left_panel'>\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            value={selectedView}\n                            onChange={handleViewSelection}\n                            id=\"session\"\n                            options={[\n                                \"State Wise\",\n                                \"District Wise\",\n                            ]}\n                            renderInput={(params) => (\n                                <TextField {...params} className=\"form-select mb-3\" label=\"Select Dataset\" />\n                            )}\n                        />\n\n\n                    </div>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <label className=\"form-label\">Filter Data:</label>\n\n                        <Autocomplete\n                            style={{ marginBottom: \"20px\" }}\n                            onChange={(event, value) => handleStateSelect(event, value)}\n                            id=\"state\"\n                            getOptionLabel={(state) => `${state}`}\n                            options={[...new Set(IndiaStates.features.map((item) => item.properties.STATE))]}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            noOptionsText={\"No Available Data\"}\n                            disabled={!selectedView}\n                            renderOption={(props, state) => (\n                                <Box component=\"li\" {...props} key={state}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {state}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params} label=\"Search State\" />}\n                        />\n\n                        {selectedView === \"District Wise\" && (\n                            <Autocomplete\n                                style={{ marginBottom: \"20px\" }}\n                                onChange={(event, value) => handleDistrictSelect(event, value)}\n                                id=\"district\"\n                                getOptionLabel={(district) => `${district}`}\n                                options={[...new Set(districtList.map((item) => item.properties.DISTRICT))]}\n                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                noOptionsText={\"No Available Data\"}\n                                disabled={districtList.length === 0}\n                                renderOption={(props, district) => (\n                                    <Box component=\"li\" {...props} key={district}\n                                        sx={{\n                                            fontSize: \"14px\",\n                                        }}>\n                                        {district}\n                                    </Box>\n                                )}\n                                renderInput={(params) => <TextField {...params}\n\n                                    label=\"Search District\" />}\n                            />\n                        )}\n\n\n\n\n                    </div>\n\n\n                </div>\n\n\n\n                <div className='right_panel'>\n                    <MapContainer\n                        fullscreenControl={true}\n\n                        center={mapCenter}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialMapZoom()}\n                        maxBounds={maxBounds}\n                        // maxZoom={8}\n                        minZoom={setInitialMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        // attributionControl={false}\n                        // scrollWheelZoom={false}\n                        doubleClickZoom={false}\n                    >\n                        <SearchBar />\n\n\n                        {filteredIndiaDistrict && (\n                            <FiltererdJsonData\n                                selectedState={selectedState}\n                                selectedDistrict={selectedDistrict}\n                                // DistrictStyle={DistrictStyle}\n                                filteredIndiaDistrict={filteredIndiaDistrict}\n                            // DistrictOnEachfeature={DistrictOnEachfeature}\n                            />\n\n\n                        )}\n\n\n                        {selectedView && selectedGeoJSonData && (\n                            <GeoJSON\n                                key={selectedView + selectedGeoJSonData.features.length}\n                                style={DistrictStyle}\n                                data={selectedGeoJSonData}\n                                onEachFeature={DistrictOnEachfeature}\n                            />\n                        )}\n\n\n\n\n\n\n\n                        {selectedView && (\n                            <div className=\"legend-panel-desktop\">\n                                <MaxFloodLegend />\n                            </div>\n                        )}\n\n\n\n\n\n\n                        <BaseMap />\n\n                    </MapContainer>\n\n                    {selectedView && (\n                        <div className=\"legend-panel-mobile\">\n                            <MaxFloodLegend />\n                        </div>\n                    )}\n                    {loading && (\n                        <div className='map_layer_loader_container_desktop'>\n                            <div className=\"map_loader_container\">\n                                <span className=\"map_loader\"></span>\n                            </div>\n\n                        </div>\n\n                    )}\n\n\n                </div>\n                {loading && (\n                    <div className='map_layer_loader_container_mobile'>\n                        <div className=\"map_loader_container\">\n                            <span className=\"map_loader\"></span>\n                        </div>\n\n                    </div>\n\n                )}\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default MaxFloodPage"],"names":["MaxFloodLegend","_jsx","_Fragment","children","_jsxs","className","style","backgroundColor","MaxFloodPage","selectedView","setSelectedView","useState","districtList","setDistrictList","selectedState","setSelectedState","filteredIndiaDistrict","setFilteredIndiaDistrict","selectedDistrict","setSelectedDistrict","loading","setLoading","selectedMapData","setSelectedMapData","selectedGeoJSonData","setSelectedGeoJSonData","useEffect","async","endpoint","concat","replace","response","fetch","selectedData","json","IndiaDistricts","IndiaStates","error","console","fetchData","DistrictDensity","density","Autocomplete","value","onChange","handleViewSelection","event","id","options","renderInput","params","TextField","label","marginBottom","handleStateSelect","items","features","filter","item","properties","STATE","Set","map","sort","filteredStateFeatures","feature","type","getOptionLabel","state","isOptionEqualToValue","option","Name","noOptionsText","disabled","renderOption","props","_createElement","Box","component","key","sx","fontSize","handleDistrictSelect","filteredDistrictFeatures","DISTRICT","district","length","MapContainer","fullscreenControl","center","mapCenter","width","height","border","margin","zoom","setInitialMapZoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","SearchBar","FiltererdJsonData","GeoJSON","DataItem","find","ID","MaxFraction","getDensityFromSummerData","fillColor","weight","opacity","color","dashArray","fillOpacity","data","onEachFeature","layer","on","e","popupContent","MaxArea","bindTooltip","sticky","openTooltip","closeTooltip","BaseMap"],"sourceRoot":""}